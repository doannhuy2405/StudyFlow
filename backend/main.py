import jwt
import os
import bcrypt 
import uvicorn
import firebase_admin
import json
from datetime import datetime, timedelta
from fastapi.middleware.cors import CORSMiddleware
from fastapi import FastAPI, HTTPException, Depends, Request
from pymongo import MongoClient, ReturnDocument
from pydantic import BaseModel
from dotenv import load_dotenv
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt
from firebase_admin import auth, credentials
from datetime import datetime
from bson import ObjectId, json_util
from models import UserLogin
from fastapi.responses import JSONResponse
from motor.motor_asyncio import AsyncIOMotorClient # type: ignore

#------------------------------Database---------------------------------------------------------
# Load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()

# K·∫øt n·ªëi MongoDB
MONGO_URI = os.getenv("MONGO_URI")
client = AsyncIOMotorClient(MONGO_URI)
if not MONGO_URI:
    raise ValueError("MONGO_URI kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong bi·∫øn m√¥i tr∆∞·ªùng!")

try:
    
    # Database ch√≠nh cho ng∆∞·ªùi d√πng
    db = client["mydatabase"]
    
    # Database ri√™ng cho admin
    db_admin = client["admin"]      
    
    # Collection users
    users_collection = db["users"]
    
    # Collection admin
    admin_collection = db_admin["admin"]
    adminstats_collection = db_admin["adminstats"]
    
    # Collection h·ªá th·ªëng
    topics_collection = db["topics"]
    lessons_collection = db["lessons"]
    dailylogs_collection = db["dailylogs"]
    reminders_collection = db["reminders"]
    settings_collection = db["settings"]
    userstats_collection = db["userstats"]
    studysessions_collection = db["studysessions"]
    activitylogs_collection = db["activitylogs"]
    collection = db["reports"]
    
    print("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng!")
except Exception as e:
    raise ValueError(f"L·ªói k·∫øt n·ªëi MongoDB: {e}")

#-------------------------------Authentication APIs-------------------------------------------------

# X√≥a app c≈© n·∫øu t·ªìn t·∫°i
if firebase_admin._DEFAULT_APP_NAME in firebase_admin._apps:
    firebase_admin.delete_app(firebase_admin.get_app())

# Kh·ªüi t·∫°o FastAPI
app = FastAPI()

# L·∫•y ƒë∆∞·ªùng d·∫´n t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
firebase_cred_path = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")

if not firebase_cred_path:
    raise ValueError("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y bi·∫øn m√¥i tr∆∞·ªùng GOOGLE_APPLICATION_CREDENTIALS!")

# Kh·ªüi t·∫°o Firebase Admin SDK
cred = credentials.Certificate(firebase_cred_path)
firebase_admin.initialize_app(cred)

# Th√™m v√†o startup
print("üî• Kh·ªüi t·∫°o Firebase...")
print(f"üîπ Path: {firebase_cred_path}")
print(f"üîπ App: {firebase_admin.get_app().name}")

# Schema nh·∫≠n token t·ª´ frontend
class GoogleLoginRequest(BaseModel):
    token: str

# C·∫•u h√¨nh CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
    expose_headers=["*"]
)

# ALGORITHM
ALGORITHM = "HS256"

# Load SECRET_KEY
SECRET_KEY = os.getenv("SECRET_KEY")
if not SECRET_KEY:
    raise ValueError("SECRET_KEY kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong bi·∫øn m√¥i tr∆∞·ªùng!")

# Schema d·ªØ li·ªáu ng∆∞·ªùi d√πng
class UserRegister(BaseModel):
    fullname: str
    email: str
    username: str
    password: str

class UserLogin(BaseModel):
    username: str
    password: str

# H√†m hash password
def hash_password(password: str) -> str:
    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

# H√†m ki·ªÉm tra password
def verify_password(plain_password: str, hashed_password: str) -> bool:
    try:
        print("üîπ Ki·ªÉm tra m·∫≠t kh·∫©u:", plain_password)
        print("üîπ M·∫≠t kh·∫©u hash:", hashed_password)

        # Ki·ªÉm tra xem hashed_password c√≥ b·ªã m·∫•t k√Ω t·ª± kh√¥ng
        if not hashed_password.startswith("$2b$"):
            print("‚ö†Ô∏è M·∫≠t kh·∫©u hash kh√¥ng h·ª£p l·ªá!")
            return False

        result = bcrypt.checkpw(plain_password.encode('utf-8'), hashed_password.encode('utf-8'))
        print("üîπ K·∫øt qu·∫£ ki·ªÉm tra:", result)
        return result
    except Exception as e:
        print("‚ùå L·ªói khi ki·ªÉm tra m·∫≠t kh·∫©u:", e)
        return False


# H√†m t·∫°o JWT token
def create_token(data: dict, expires_delta: timedelta = timedelta(hours=1)):
    to_encode = data.copy()
    expire = datetime.utcnow() + expires_delta
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm="HS256")


# API ƒêƒÉng k√Ω ng∆∞·ªùi d√πng
@app.post("/auth/register")
async def register(user: UserRegister):
    print("D·ªØ li·ªáu t·ª´ frontend:", user.dict())  # In d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ frontend

    # Ki·ªÉm tra email v√† username ƒë√£ t·ªìn t·∫°i ch∆∞a
    if users_collection.find_one({"email": user.email}):
        raise HTTPException(status_code=400, detail="Email ƒë√£ t·ªìn t·∫°i!")
    if users_collection.find_one({"username": user.username}):
        raise HTTPException(status_code=400, detail="Username ƒë√£ t·ªìn t·∫°i!")

    # BƒÉm m·∫≠t kh·∫©u
    hashed_password = hash_password(user.password)
    
    new_user = {
        "fullname": user.fullname,
        "email": user.email,
        "username": user.username,
        "password": hashed_password,
    }
    users_collection.insert_one(new_user)
    
    # T·∫°o Token ngay sau khi ƒëƒÉng k√Ω
    token_data = {"username": user.username, "email": user.email}
    token = create_token(token_data)

    return {
        "message": "ƒêƒÉng k√Ω th√†nh c√¥ng!",
        "token": token,
        "username": user.username,
        "fullname": user.fullname,
    }


# API ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
@app.post("/auth/login")
async def login(user: UserLogin):
    print("ƒêƒÉng nh·∫≠p:", user.dict())

    # ph·∫£i await find_one
    admin = await admin_collection.find_one({"username": user.username})
    if admin and verify_password(user.password, admin["password"]):
        token_data = {"username": admin["username"], "role": "admin"}
        token = create_token(token_data)

        return {
            "token": token,
            "user": {
                "username": admin["username"],
                "fullname": admin.get("fullname", "Admin"),
                "role": "admin"
            }
        }

    db_user = await users_collection.find_one({"username": user.username})
    if db_user and verify_password(user.password, db_user["password"]):
        token_data = {"username": db_user["username"], "role": "user"}
        token = create_token(token_data)

        return {
            "token": token,
            "user": {
                "username": db_user["username"],
                "fullname": db_user.get("fullname", ""),
                "role": "user"
            }
        }

    raise HTTPException(status_code=400, detail="Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u!")


    # Ki·ªÉm tra trong b·∫£ng ng∆∞·ªùi d√πng th∆∞·ªùng
    db_user = users_collection.find_one({"username": user.username})
    if db_user and verify_password(user.password, db_user["password"]):
        token_data = {"username": db_user["username"], "role": "user"}
        token = create_token(token_data)

        return {
            "token": token,
            "user": {
                "username": db_user["username"],
                "fullname": db_user.get("fullname", ""),
                "role": "user"
            }
        }

    # Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n
    raise HTTPException(status_code=400, detail="Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u!")
    
    
# Endpoint ki·ªÉm tra th√¥ng tin 
@app.get("/auth/check-user-by-email/{email}")
async def check_user_by_email(email: str):
    user = users_collection.find_one({"email": email})
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user

@app.get("/auth/check-user-by-uid/{uid}")
async def check_user_by_uid(uid: str):
    user = users_collection.find_one({"uid": uid})
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user    
    
    
# Endpoint ƒëƒÉng nh·∫≠p Google
@app.post("/auth/google-login")
async def google_login(request: Request):
    try:
        data = await request.json()
        id_token = data.get("token")
        
        if not id_token:
            raise HTTPException(status_code=400, detail="Thi·∫øu token Google")

        # 1. X√°c th·ª±c v·ªõi Firebase
        decoded_token = auth.verify_id_token(id_token)
        uid = decoded_token["uid"]
        email = decoded_token.get("email")
        name = decoded_token.get("name", "Ng∆∞·ªùi d√πng Google")
        picture = decoded_token.get("picture", "")
        
        if not email:
            raise HTTPException(status_code=400, detail="Token kh√¥ng ch·ª©a email")

        # 2. T·∫°o/T√¨m user trong MongoDB (s·ª≠ d·ª•ng upsert)
        user_data = {
            "uid": uid,
            "email": email,
            "username": email.split("@")[0],  # T·∫°o username t·ª´ email
            "fullname": name,
            "photo": picture,
            "last_login": datetime.utcnow(),
            "updated_at": datetime.utcnow()
        }

        # S·ª≠ d·ª•ng find_one_and_update v·ªõi upsert
        result = users_collection.find_one_and_update(
            {"email": email},
            {
                "$set": user_data,
                "$setOnInsert": {
                    "created_at": datetime.utcnow(),
                    "roles": ["user"],
                    "password": ""  # Tr∆∞·ªùng password r·ªóng cho user Google
                }
            },
            upsert=True,
            return_document=ReturnDocument.AFTER
        )

        if not result:
            raise HTTPException(status_code=500, detail="Kh√¥ng th·ªÉ l∆∞u user v√†o database")

        # 3. T·∫°o JWT token
        token_data = {
            "sub": str(result["_id"]),
            "username": result["username"],
            "email": email,
            "exp": datetime.utcnow() + timedelta(days=1)
        }
        token = jwt.encode(token_data, SECRET_KEY, algorithm="HS256")

        return {
            "success": True,
            "token": token,
            "user": {
                "id": str(result["_id"]),
                "username": result["username"],
                "email": email,
                "fullname": name,
                "photo": picture
            }
        }

    except Exception as e:
        print(f"üî• L·ªói: {str(e)}")
        raise HTTPException(status_code=500, detail=f"L·ªói server: {str(e)}")
    

#Endpoint ki·ªÉm tra user
@app.get("/auth/debug/user/{email}")
async def debug_user(email: str):
    user = users_collection.find_one({"email": email})
    if not user:
        return {"error": "User not found"}
    return user


# C·∫•u h√¨nh OAuth2
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/login")


# H√†m gi·∫£i m√£ token
def decode_token(token: str):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("username")
        if username is None:
            raise HTTPException(status_code=401, detail="Invalid token")
        return username
    except JWTError as e:
        print("‚ùå L·ªói gi·∫£i m√£ token:", str(e))
        raise HTTPException(status_code=401, detail="Invalid token")
    

# API l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
@app.get("/auth/profile")
async def get_user_profile(token: str = Depends(oauth2_scheme)):
    username = decode_token(token)
    
    user = await users_collection.find_one({"username": username})  
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    return {
        "username": user.get("username", ""),
        "fullname": user.get("fullname", ""),
        "email": user.get("email", ""),
        "photo": user.get("photo", ""),
    }

    

# API l·∫•y th√¥ng tin admin
@app.get("/auth/admin/profile")
async def get_admin_profile():
    admin = await admin_collection.find_one({"username": "admin"})
    
    if not admin:
        raise HTTPException(status_code=404, detail="Admin not found")
    
    return {
        "fullname": admin.get("fullname", "Qu·∫£n tr·ªã vi√™n"),
        "username": admin.get("username", "admin"),
        "email": admin.get("email", "admin@studyflow.com"),
        "role": admin.get("role", "admin"),
        "created_at": admin.get("created_at", datetime.utcnow())
    }


# API c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
@app.put("/auth/profile")
async def update_user_profile(request: Request, token: str = Depends(oauth2_scheme)):
    try:
        username = decode_token(token)
        user = await users_collection.find_one({"username": username})  # ‚úÖ th√™m await
        if not user:
            raise HTTPException(status_code=404, detail="Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i")

        data = await request.json()
        email = data.get("email")
        password = data.get("password")
        photo = data.get("photo")

        update_data = {}

        if email and email != user.get("email"):
            update_data["email"] = email
        if password:
            hashed_password = hash_password(password)
            if hashed_password != user.get("password"):
                update_data["password"] = hashed_password
        if photo and photo != user.get("photo"):
            update_data["photo"] = photo

        if not update_data:
            raise HTTPException(status_code=400, detail="Kh√¥ng c√≥ thay ƒë·ªïi ƒë·ªÉ c·∫≠p nh·∫≠t")

        await users_collection.update_one({"username": username}, {"$set": update_data})  # ‚úÖ th√™m await
        return {"message": "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng"}
    except HTTPException as e:
        raise e
    except Exception as e:
        print("‚ùå L·ªói c·∫≠p nh·∫≠t:", e)
        raise HTTPException(status_code=500, detail="L·ªói server khi c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng")


#-------------------------------User APIs------------------------------------------------------

# Schema d·ªØ li·ªáu do ch·ª©c nƒÉng ng∆∞·ªùi d√πng th·ª±c hi·ªán
class TopicCreate(BaseModel):
    name: str
    description: str
    user_id: str

class LessonCreate(BaseModel):
    topic_id: str
    name: str
    note: str
    due_date: str
    status: str

class HabitSetup(BaseModel):
    user_id: str
    study_days: list
    rest_days: list

class JournalCreate(BaseModel):
    user_id: str
    content: str

class EvaluationCreate(BaseModel):
    user_id: str
    rating: int
    comment: str

class ReminderSetting(BaseModel):
    time: str
    
# L·∫•y danh s√°ch ch·ªß ƒë·ªÅ
@app.get("/topics")
async def get_topics():
    return await topics_collection.find().to_list(100)

# T·∫°o ch·ªß ƒë·ªÅ h·ªçc m·ªõi
@app.post("/topics")
async def create_topic(topic: TopicCreate):
    result = await topics_collection.insert_one(topic.dict())
    return {"id": str(result.inserted_id)}

# C·∫≠p nh·∫≠t th√¥ng tin ch·ªß ƒë·ªÅ
@app.put("/topics/{id}")
async def update_topic(id: str, topic: TopicCreate):
    result = await topics_collection.update_one({"_id": ObjectId(id)}, {"$set": topic.dict()})
    if result.matched_count == 0:
        raise HTTPException(status_code=404, detail="Topic not found")
    return {"msg": "Updated successfully"}

# X√≥a ch·ªß ƒë·ªÅ h·ªçc
@app.delete("/topics/{id}")
async def delete_topic(id: str):
    result = await topics_collection.delete_one({"_id": ObjectId(id)})
    if result.deleted_count == 0:
        raise HTTPException(status_code=404, detail="Topic not found")
    return {"msg": "Deleted"}

# L·∫•y danh s√°ch b√†i h·ªçc trong ch·ªß ƒë·ªÅ
@app.get("/topics/{topic_id}/lessons")
async def get_lessons(topic_id: str):
    return await lessons_collection.find({"topic_id": topic_id}).to_list(100)

# Th√™m b√†i h·ªçc v√†o ch·ªß ƒë·ªÅ
@app.post("/topics/{topic_id}/lessons")
async def add_lesson(topic_id: str, lesson: LessonCreate):
    lesson_dict = lesson.dict()
    lesson_dict["topic_id"] = topic_id
    result = await lessons_collection.insert_one(lesson_dict)
    return {"id": str(result.inserted_id)}

# S·ª≠a b√†i h·ªçc
@app.put("/lessons/{id}")
async def update_lesson(id: str, lesson: LessonCreate):
    result = await lessons_collection.update_one({"_id": ObjectId(id)}, {"$set": lesson.dict()})
    if result.matched_count == 0:
        raise HTTPException(status_code=404, detail="Lesson not found")
    return {"msg": "Lesson updated"}

# X√≥a b√†i h·ªçc
@app.delete("/lessons/{id}")
async def delete_lesson(id: str):
    result = await lessons_collection.delete_one({"_id": ObjectId(id)})
    if result.deleted_count == 0:
        raise HTTPException(status_code=404, detail="Lesson not found")
    return {"msg": "Lesson deleted"}

# Thi·∫øt l·∫≠p th√≥i quen h·ªçc t·∫≠p
@app.post("/habits")
async def setup_habits(habit: HabitSetup):
    await settings_collection.update_one({"user_id": habit.user_id}, {"$set": habit.dict()}, upsert=True)
    return {"msg": "Habits set"}

# L·∫•y d·ªØ li·ªáu th√≥i quen h·ªçc
@app.get("/habits")
async def get_habits(user_id: str):
    return await settings_collection.find_one({"user_id": user_id})

# B·∫Øt ƒë·∫ßu ƒë·ªìng h·ªì ƒëo th·ªùi gian th·ª±c t·∫ø
@app.post("/timetracking/start")
async def start_tracking(user_id: str):
    session = {"user_id": user_id, "start": datetime.utcnow()}
    await studysessions_collection.insert_one(session)
    return {"msg": "Tracking started"}

# D·ª´ng ƒë·ªìng h·ªô v√† l∆∞u th·ªùi gian h·ªçc
@app.post("/timetracking/stop")
async def stop_tracking(user_id: str):
    session = await studysessions_collection.find_one({"user_id": user_id}, sort=[("start", -1)])
    if not session:
        raise HTTPException(status_code=404, detail="No active session")
    end_time = datetime.utcnow()
    duration = (end_time - session["start"]).total_seconds()
    await studysessions_collection.update_one({"_id": session["_id"]}, {"$set": {"end": end_time, "duration": duration}})
    return {"duration": duration}

# B·∫Øt ƒë·∫ßu ƒë·ªìng h·ªì ƒë·∫øm ng∆∞·ª£c
@app.post("/pomodoro/start")
async def start_pomodoro(user_id: str):
    return {"msg": "Pomodoro started"}  # Placeholder

# T·∫°o nh·∫≠t k√Ω h·ªçc t·∫≠p h√†ng ng√†y
@app.post("/journals")
async def create_journal(journal: JournalCreate):
    journal_dict = journal.dict()
    journal_dict["date"] = datetime.utcnow()
    await dailylogs_collection.insert_one(journal_dict)
    return {"msg": "Journal saved"}

# L·∫•y danh s√°ch nh·∫≠t k√Ω
@app.get("/journals")
async def get_journals(user_id: str):
    return await dailylogs_collection.find({"user_id": user_id}).to_list(100)

# G·ª≠i ƒë√°nh gi√° h·ªçc t·∫≠p h√†ng ng√†y
@app.post("/evaluations")
async def create_evaluation(evaluation: EvaluationCreate):
    evaluation_dict = evaluation.dict()
    evaluation_dict["date"] = datetime.utcnow()
    await activitylogs_collection.insert_one(evaluation_dict)
    return {"msg": "Evaluation saved"}

# Xem ƒë√°nh gi√° h·ªçc t·∫≠p 
@app.get("/evaluations")
async def get_evaluations(user_id: str):
    return await activitylogs_collection.find({"user_id": user_id}).to_list(100)


#-------------------------------User APIs------------------------------------------------------


#-------------------------------Admin APIs------------------------------------------------------

# L·∫•y danh s√°ch ng∆∞·ªùi d√πng
@app.get("/admin/users")
async def get_users(token: str = Depends(oauth2_scheme)):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        if payload.get("role") != "admin":
            raise HTTPException(status_code=403, detail="Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p")

        users_cursor = users_collection.find({})
        users = await users_cursor.to_list(length=None)
        for user in users:
            user["_id"] = str(user["_id"])
        return users

    except JWTError:
        raise HTTPException(status_code=401, detail="Token kh√¥ng h·ª£p l·ªá")



# Th√™m ng∆∞·ªùi d√πng th·ªß c√¥ng t·ª´ admin
@app.post("/admin/users")
async def create_user(user: dict, token: str = Depends(oauth2_scheme)):
    payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
    if payload.get("role") != "admin":
        raise HTTPException(status_code=403, detail="Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p")
    
    existing = await users_collection.find_one({
        "$or": [{"username": user["username"]}, {"email": user["email"]}]
    })
    if existing:
        raise HTTPException(status_code=400, detail="Username ho·∫∑c email ƒë√£ t·ªìn t·∫°i")
    
    user["password"] = bcrypt.hashpw(user["password"].encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
    user["locked"] = False
    user["created_at"] = datetime.utcnow()

    result = await users_collection.insert_one(user)
    user["_id"] = str(result.inserted_id)

    return user


# X√≥a ng∆∞·ªùi d√πng t·ª´ admin
@app.delete("/admin/users/{id}")
async def delete_user(id: str, token: str = Depends(oauth2_scheme)):
    payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
    if payload.get("role") != "admin":
        raise HTTPException(status_code=403, detail="Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p")

    try:
        result = await users_collection.delete_one({"_id": ObjectId(id)})
        if result.deleted_count == 0:
            raise HTTPException(status_code=404, detail="User kh√¥ng t·ªìn t·∫°i")
        return {"status": "success"}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

# Kh√≥a t√†i kho·∫£n ng∆∞·ªùi d√πng
@app.patch("/admin/users/{id}/lock")
async def lock_user(id: str, token: str = Depends(oauth2_scheme)):
    payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
    if payload.get("role") != "admin":
        raise HTTPException(status_code=403, detail="Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p")

    result = await users_collection.update_one(
        {"_id": ObjectId(id)},
        {"$set": {"locked": True}}
    )
    if result.modified_count == 0:
        raise HTTPException(status_code=404, detail="User kh√¥ng t·ªìn t·∫°i")
    return {"status": "locked"}


# M·ªü kh√≥a t√†i kho·∫£n ng∆∞·ªùi d√πng
@app.patch("/admin/users/{id}/unlock")
async def unlock_user(id: str, token: str = Depends(oauth2_scheme)):
    payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
    if payload.get("role") != "admin":
        raise HTTPException(status_code=403, detail="Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p")

    result = await users_collection.update_one(
        {"_id": ObjectId(id)},
        {"$set": {"locked": False}}
    )
    if result.modified_count == 0:
        raise HTTPException(status_code=404, detail="User kh√¥ng t·ªìn t·∫°i")
    return {"status": "unlocked"}

# Th·ªëng k√™ t·ªïng s·ªë ng∆∞·ªùi d√πng
@app.get("/admin/statistics/users")
async def total_users():
    count = await users_collection.count_documents({})
    return {"total_users": count}

# Th·ªëng k√™ t·ªïng s·ªë gi·ªù h·ªçc to√†n h·ªá th·ªëng
@app.get("/admin/statistics/hours")
async def total_hours():
    cursor = studysessions_collection.find({"duration": {"$exists": True}})
    total = sum([doc["duration"] async for doc in cursor])
    return {"total_hours": total}

# Th·ªëng k√™ t·ªïng s·ªë b√†i h·ªçc ƒë√£ ho√†n th√†nh
@app.get("/admin/statistics/lessons")
async def total_completed_lessons():
    count = await lessons_collection.count_documents({"status": "completed"})
    return {"total_completed_lessons": count}

# M·ª©c ƒë·ªô ho·∫°t ƒë·ªông trung b√¨nh theo ng√†y/tu·∫ßn
@app.get("/admin/statistics/active-level")
async def active_level():
    # Placeholder logic
    return {"daily_avg": 3.5, "weekly_avg": 24.5}

# ƒê·∫∑t gi·ªù nh·∫Øc m·∫∑c ƒë·ªãnh cho h·ªá th·ªëng
@app.post("/admin/reminder/default")
async def set_default_reminder(reminder: ReminderSetting):
    await reminders_collection.update_one({"type": "default"}, {"$set": {"time": reminder.time}}, upsert=True)
    return {"msg": "Reminder set"}

# L·∫•y c·∫•u h√¨nh nh·∫Øc m·∫∑c ƒë·ªãnh hi·ªán t·∫°i
@app.get("/admin/reminder/default")
async def get_default_reminder():
    reminder = await reminders_collection.find_one({"type": "default"})
    return reminder or {"msg": "No default reminder"}

#-------------------------------Admin APIs------------------------------------------------------
    
if __name__ == "__main__": 
    # Ch·∫°y Server
    uvicorn.run(app, host="0.0.0.0", port=5000)